// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `app_font.ttc`.
    static let app_fontTtc = FileResource(bundle: _R.hostingBundle, name: "app_font", pathExtension: "ttc")
    /// Resource file `DefaultPlayerData.json`.
    static let defaultPlayerDataJson = FileResource(bundle: _R.hostingBundle, name: "DefaultPlayerData", pathExtension: "json")
    /// Resource file `GameData.json`.
    static let gameDataJson = FileResource(bundle: _R.hostingBundle, name: "GameData", pathExtension: "json")
    /// Resource file `iTunesArtwork@2x.png`.
    static let iTunesArtwork2xPng = FileResource(bundle: _R.hostingBundle, name: "iTunesArtwork@2x", pathExtension: "png")
    /// Resource file `iTunesArtwork.png`.
    static let iTunesArtworkPng = FileResource(bundle: _R.hostingBundle, name: "iTunesArtwork", pathExtension: "png")
    
    /// `bundle.URLForResource("app_font", withExtension: "ttc")`
    static func app_fontTtc(_: Void) -> NSURL? {
      let fileResource = R.file.app_fontTtc
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("DefaultPlayerData", withExtension: "json")`
    static func defaultPlayerDataJson(_: Void) -> NSURL? {
      let fileResource = R.file.defaultPlayerDataJson
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("GameData", withExtension: "json")`
    static func gameDataJson(_: Void) -> NSURL? {
      let fileResource = R.file.gameDataJson
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("iTunesArtwork@2x", withExtension: "png")`
    static func iTunesArtwork2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.iTunesArtwork2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("iTunesArtwork", withExtension: "png")`
    static func iTunesArtworkPng(_: Void) -> NSURL? {
      let fileResource = R.file.iTunesArtworkPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 118 images.
  struct image {
    /// Image `background.blue`.
    static let backgroundBlue = ImageResource(bundle: _R.hostingBundle, name: "background.blue")
    /// Image `background.green`.
    static let backgroundGreen = ImageResource(bundle: _R.hostingBundle, name: "background.green")
    /// Image `background.hand.odds.green`.
    static let backgroundHandOddsGreen = ImageResource(bundle: _R.hostingBundle, name: "background.hand.odds.green")
    /// Image `background.hand.odds.grey`.
    static let backgroundHandOddsGrey = ImageResource(bundle: _R.hostingBundle, name: "background.hand.odds.grey")
    /// Image `background.stats.level.1`.
    static let backgroundStatsLevel1 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.1")
    /// Image `background.stats.level.2`.
    static let backgroundStatsLevel2 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.2")
    /// Image `background.stats.level.3`.
    static let backgroundStatsLevel3 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.3")
    /// Image `background.stats.level.4`.
    static let backgroundStatsLevel4 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.4")
    /// Image `background.stats.level.5`.
    static let backgroundStatsLevel5 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.5")
    /// Image `background.stats.level.6`.
    static let backgroundStatsLevel6 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.6")
    /// Image `background.stats.level.7`.
    static let backgroundStatsLevel7 = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.7")
    /// Image `background.stats.level.overall`.
    static let backgroundStatsLevelOverall = ImageResource(bundle: _R.hostingBundle, name: "background.stats.level.overall")
    /// Image `background.table.level.1`.
    static let backgroundTableLevel1 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.1")
    /// Image `background.table.level.2`.
    static let backgroundTableLevel2 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.2")
    /// Image `background.table.level.3`.
    static let backgroundTableLevel3 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.3")
    /// Image `background.table.level.4`.
    static let backgroundTableLevel4 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.4")
    /// Image `background.table.level.5`.
    static let backgroundTableLevel5 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.5")
    /// Image `background.table.level.6`.
    static let backgroundTableLevel6 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.6")
    /// Image `background.table.level.7`.
    static let backgroundTableLevel7 = ImageResource(bundle: _R.hostingBundle, name: "background.table.level.7")
    /// Image `background.table.locked`.
    static let backgroundTableLocked = ImageResource(bundle: _R.hostingBundle, name: "background.table.locked")
    /// Image `banner.standard`.
    static let bannerStandard = ImageResource(bundle: _R.hostingBundle, name: "banner.standard")
    /// Image `banner.unlock.level.2`.
    static let bannerUnlockLevel2 = ImageResource(bundle: _R.hostingBundle, name: "banner.unlock.level.2")
    /// Image `banner.unlock.level.3`.
    static let bannerUnlockLevel3 = ImageResource(bundle: _R.hostingBundle, name: "banner.unlock.level.3")
    /// Image `banner.unlock.level.4`.
    static let bannerUnlockLevel4 = ImageResource(bundle: _R.hostingBundle, name: "banner.unlock.level.4")
    /// Image `banner.unlock.level.5`.
    static let bannerUnlockLevel5 = ImageResource(bundle: _R.hostingBundle, name: "banner.unlock.level.5")
    /// Image `banner.unlock.level.6`.
    static let bannerUnlockLevel6 = ImageResource(bundle: _R.hostingBundle, name: "banner.unlock.level.6")
    /// Image `banner.unlock.level.7`.
    static let bannerUnlockLevel7 = ImageResource(bundle: _R.hostingBundle, name: "banner.unlock.level.7")
    /// Image `button.menu.play.normal`.
    static let buttonMenuPlayNormal = ImageResource(bundle: _R.hostingBundle, name: "button.menu.play.normal")
    /// Image `button.menu.play.selected`.
    static let buttonMenuPlaySelected = ImageResource(bundle: _R.hostingBundle, name: "button.menu.play.selected")
    /// Image `button.menu.share.normal`.
    static let buttonMenuShareNormal = ImageResource(bundle: _R.hostingBundle, name: "button.menu.share.normal")
    /// Image `button.menu.share.selected`.
    static let buttonMenuShareSelected = ImageResource(bundle: _R.hostingBundle, name: "button.menu.share.selected")
    /// Image `button.menu.stats.normal`.
    static let buttonMenuStatsNormal = ImageResource(bundle: _R.hostingBundle, name: "button.menu.stats.normal")
    /// Image `button.menu.stats.selected`.
    static let buttonMenuStatsSelected = ImageResource(bundle: _R.hostingBundle, name: "button.menu.stats.selected")
    /// Image `card.back`.
    static let cardBack = ImageResource(bundle: _R.hostingBundle, name: "card.back")
    /// Image `card.suit0.rank0`.
    static let cardSuit0Rank0 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank0")
    /// Image `card.suit0.rank1`.
    static let cardSuit0Rank1 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank1")
    /// Image `card.suit0.rank10`.
    static let cardSuit0Rank10 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank10")
    /// Image `card.suit0.rank11`.
    static let cardSuit0Rank11 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank11")
    /// Image `card.suit0.rank12`.
    static let cardSuit0Rank12 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank12")
    /// Image `card.suit0.rank2`.
    static let cardSuit0Rank2 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank2")
    /// Image `card.suit0.rank3`.
    static let cardSuit0Rank3 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank3")
    /// Image `card.suit0.rank4`.
    static let cardSuit0Rank4 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank4")
    /// Image `card.suit0.rank5`.
    static let cardSuit0Rank5 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank5")
    /// Image `card.suit0.rank6`.
    static let cardSuit0Rank6 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank6")
    /// Image `card.suit0.rank7`.
    static let cardSuit0Rank7 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank7")
    /// Image `card.suit0.rank8`.
    static let cardSuit0Rank8 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank8")
    /// Image `card.suit0.rank9`.
    static let cardSuit0Rank9 = ImageResource(bundle: _R.hostingBundle, name: "card.suit0.rank9")
    /// Image `card.suit1.rank0`.
    static let cardSuit1Rank0 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank0")
    /// Image `card.suit1.rank1`.
    static let cardSuit1Rank1 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank1")
    /// Image `card.suit1.rank10`.
    static let cardSuit1Rank10 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank10")
    /// Image `card.suit1.rank11`.
    static let cardSuit1Rank11 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank11")
    /// Image `card.suit1.rank12`.
    static let cardSuit1Rank12 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank12")
    /// Image `card.suit1.rank2`.
    static let cardSuit1Rank2 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank2")
    /// Image `card.suit1.rank3`.
    static let cardSuit1Rank3 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank3")
    /// Image `card.suit1.rank4`.
    static let cardSuit1Rank4 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank4")
    /// Image `card.suit1.rank5`.
    static let cardSuit1Rank5 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank5")
    /// Image `card.suit1.rank6`.
    static let cardSuit1Rank6 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank6")
    /// Image `card.suit1.rank7`.
    static let cardSuit1Rank7 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank7")
    /// Image `card.suit1.rank8`.
    static let cardSuit1Rank8 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank8")
    /// Image `card.suit1.rank9`.
    static let cardSuit1Rank9 = ImageResource(bundle: _R.hostingBundle, name: "card.suit1.rank9")
    /// Image `card.suit2.rank0`.
    static let cardSuit2Rank0 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank0")
    /// Image `card.suit2.rank1`.
    static let cardSuit2Rank1 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank1")
    /// Image `card.suit2.rank10`.
    static let cardSuit2Rank10 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank10")
    /// Image `card.suit2.rank11`.
    static let cardSuit2Rank11 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank11")
    /// Image `card.suit2.rank12`.
    static let cardSuit2Rank12 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank12")
    /// Image `card.suit2.rank2`.
    static let cardSuit2Rank2 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank2")
    /// Image `card.suit2.rank3`.
    static let cardSuit2Rank3 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank3")
    /// Image `card.suit2.rank4`.
    static let cardSuit2Rank4 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank4")
    /// Image `card.suit2.rank5`.
    static let cardSuit2Rank5 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank5")
    /// Image `card.suit2.rank6`.
    static let cardSuit2Rank6 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank6")
    /// Image `card.suit2.rank7`.
    static let cardSuit2Rank7 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank7")
    /// Image `card.suit2.rank8`.
    static let cardSuit2Rank8 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank8")
    /// Image `card.suit2.rank9`.
    static let cardSuit2Rank9 = ImageResource(bundle: _R.hostingBundle, name: "card.suit2.rank9")
    /// Image `card.suit3.rank0`.
    static let cardSuit3Rank0 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank0")
    /// Image `card.suit3.rank1`.
    static let cardSuit3Rank1 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank1")
    /// Image `card.suit3.rank10`.
    static let cardSuit3Rank10 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank10")
    /// Image `card.suit3.rank11`.
    static let cardSuit3Rank11 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank11")
    /// Image `card.suit3.rank12`.
    static let cardSuit3Rank12 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank12")
    /// Image `card.suit3.rank2`.
    static let cardSuit3Rank2 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank2")
    /// Image `card.suit3.rank3`.
    static let cardSuit3Rank3 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank3")
    /// Image `card.suit3.rank4`.
    static let cardSuit3Rank4 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank4")
    /// Image `card.suit3.rank5`.
    static let cardSuit3Rank5 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank5")
    /// Image `card.suit3.rank6`.
    static let cardSuit3Rank6 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank6")
    /// Image `card.suit3.rank7`.
    static let cardSuit3Rank7 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank7")
    /// Image `card.suit3.rank8`.
    static let cardSuit3Rank8 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank8")
    /// Image `card.suit3.rank9`.
    static let cardSuit3Rank9 = ImageResource(bundle: _R.hostingBundle, name: "card.suit3.rank9")
    /// Image `iTunesArtwork`.
    static let iTunesArtwork = ImageResource(bundle: _R.hostingBundle, name: "iTunesArtwork")
    /// Image `icon.chip.blue`.
    static let iconChipBlue = ImageResource(bundle: _R.hostingBundle, name: "icon.chip.blue")
    /// Image `icon.done.blue`.
    static let iconDoneBlue = ImageResource(bundle: _R.hostingBundle, name: "icon.done.blue")
    /// Image `icon.done.green`.
    static let iconDoneGreen = ImageResource(bundle: _R.hostingBundle, name: "icon.done.green")
    /// Image `icon.leaderboards.blue`.
    static let iconLeaderboardsBlue = ImageResource(bundle: _R.hostingBundle, name: "icon.leaderboards.blue")
    /// Image `icon.menu.play`.
    static let iconMenuPlay = ImageResource(bundle: _R.hostingBundle, name: "icon.menu.play")
    /// Image `icon.menu.stats`.
    static let iconMenuStats = ImageResource(bundle: _R.hostingBundle, name: "icon.menu.stats")
    /// Image `icon.share.facebook.large`.
    static let iconShareFacebookLarge = ImageResource(bundle: _R.hostingBundle, name: "icon.share.facebook.large")
    /// Image `icon.share.facebook.small`.
    static let iconShareFacebookSmall = ImageResource(bundle: _R.hostingBundle, name: "icon.share.facebook.small")
    /// Image `icon.share.instagram.large`.
    static let iconShareInstagramLarge = ImageResource(bundle: _R.hostingBundle, name: "icon.share.instagram.large")
    /// Image `icon.share.instagram.small`.
    static let iconShareInstagramSmall = ImageResource(bundle: _R.hostingBundle, name: "icon.share.instagram.small")
    /// Image `icon.share.twitter.large`.
    static let iconShareTwitterLarge = ImageResource(bundle: _R.hostingBundle, name: "icon.share.twitter.large")
    /// Image `icon.share.twitter.small`.
    static let iconShareTwitterSmall = ImageResource(bundle: _R.hostingBundle, name: "icon.share.twitter.small")
    /// Image `icon.stats.blue`.
    static let iconStatsBlue = ImageResource(bundle: _R.hostingBundle, name: "icon.stats.blue")
    /// Image `icon.stats.green`.
    static let iconStatsGreen = ImageResource(bundle: _R.hostingBundle, name: "icon.stats.green")
    /// Image `launch.screen`.
    static let launchScreen = ImageResource(bundle: _R.hostingBundle, name: "launch.screen")
    /// Image `overlay.letters.blue`.
    static let overlayLettersBlue = ImageResource(bundle: _R.hostingBundle, name: "overlay.letters.blue")
    /// Image `overlay.stats.locked.level.2`.
    static let overlayStatsLockedLevel2 = ImageResource(bundle: _R.hostingBundle, name: "overlay.stats.locked.level.2")
    /// Image `overlay.stats.locked.level.3`.
    static let overlayStatsLockedLevel3 = ImageResource(bundle: _R.hostingBundle, name: "overlay.stats.locked.level.3")
    /// Image `overlay.stats.locked.level.4`.
    static let overlayStatsLockedLevel4 = ImageResource(bundle: _R.hostingBundle, name: "overlay.stats.locked.level.4")
    /// Image `overlay.stats.locked.level.5`.
    static let overlayStatsLockedLevel5 = ImageResource(bundle: _R.hostingBundle, name: "overlay.stats.locked.level.5")
    /// Image `overlay.stats.locked.level.6`.
    static let overlayStatsLockedLevel6 = ImageResource(bundle: _R.hostingBundle, name: "overlay.stats.locked.level.6")
    /// Image `overlay.stats.locked.level.7`.
    static let overlayStatsLockedLevel7 = ImageResource(bundle: _R.hostingBundle, name: "overlay.stats.locked.level.7")
    /// Image `overlay.table.locked.level.2`.
    static let overlayTableLockedLevel2 = ImageResource(bundle: _R.hostingBundle, name: "overlay.table.locked.level.2")
    /// Image `overlay.table.locked.level.3`.
    static let overlayTableLockedLevel3 = ImageResource(bundle: _R.hostingBundle, name: "overlay.table.locked.level.3")
    /// Image `overlay.table.locked.level.4`.
    static let overlayTableLockedLevel4 = ImageResource(bundle: _R.hostingBundle, name: "overlay.table.locked.level.4")
    /// Image `overlay.table.locked.level.5`.
    static let overlayTableLockedLevel5 = ImageResource(bundle: _R.hostingBundle, name: "overlay.table.locked.level.5")
    /// Image `overlay.table.locked.level.6`.
    static let overlayTableLockedLevel6 = ImageResource(bundle: _R.hostingBundle, name: "overlay.table.locked.level.6")
    /// Image `overlay.table.locked.level.7`.
    static let overlayTableLockedLevel7 = ImageResource(bundle: _R.hostingBundle, name: "overlay.table.locked.level.7")
    /// Image `shadow.blue`.
    static let shadowBlue = ImageResource(bundle: _R.hostingBundle, name: "shadow.blue")
    /// Image `share.screen.instagram`.
    static let shareScreenInstagram = ImageResource(bundle: _R.hostingBundle, name: "share.screen.instagram")
    /// Image `share.screen.twitter`.
    static let shareScreenTwitter = ImageResource(bundle: _R.hostingBundle, name: "share.screen.twitter")
    
    /// `UIImage(named: "background.blue", bundle: ..., traitCollection: ...)`
    static func backgroundBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.green", bundle: ..., traitCollection: ...)`
    static func backgroundGreen(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundGreen, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.hand.odds.green", bundle: ..., traitCollection: ...)`
    static func backgroundHandOddsGreen(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundHandOddsGreen, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.hand.odds.grey", bundle: ..., traitCollection: ...)`
    static func backgroundHandOddsGrey(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundHandOddsGrey, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.1", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.2", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.3", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.4", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.5", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.6", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.7", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevel7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevel7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.stats.level.overall", bundle: ..., traitCollection: ...)`
    static func backgroundStatsLevelOverall(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundStatsLevelOverall, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.1", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.2", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.3", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.4", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.5", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.6", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.level.7", bundle: ..., traitCollection: ...)`
    static func backgroundTableLevel7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLevel7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "background.table.locked", bundle: ..., traitCollection: ...)`
    static func backgroundTableLocked(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.backgroundTableLocked, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.standard", bundle: ..., traitCollection: ...)`
    static func bannerStandard(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerStandard, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.unlock.level.2", bundle: ..., traitCollection: ...)`
    static func bannerUnlockLevel2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerUnlockLevel2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.unlock.level.3", bundle: ..., traitCollection: ...)`
    static func bannerUnlockLevel3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerUnlockLevel3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.unlock.level.4", bundle: ..., traitCollection: ...)`
    static func bannerUnlockLevel4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerUnlockLevel4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.unlock.level.5", bundle: ..., traitCollection: ...)`
    static func bannerUnlockLevel5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerUnlockLevel5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.unlock.level.6", bundle: ..., traitCollection: ...)`
    static func bannerUnlockLevel6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerUnlockLevel6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "banner.unlock.level.7", bundle: ..., traitCollection: ...)`
    static func bannerUnlockLevel7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bannerUnlockLevel7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button.menu.play.normal", bundle: ..., traitCollection: ...)`
    static func buttonMenuPlayNormal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonMenuPlayNormal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button.menu.play.selected", bundle: ..., traitCollection: ...)`
    static func buttonMenuPlaySelected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonMenuPlaySelected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button.menu.share.normal", bundle: ..., traitCollection: ...)`
    static func buttonMenuShareNormal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonMenuShareNormal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button.menu.share.selected", bundle: ..., traitCollection: ...)`
    static func buttonMenuShareSelected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonMenuShareSelected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button.menu.stats.normal", bundle: ..., traitCollection: ...)`
    static func buttonMenuStatsNormal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonMenuStatsNormal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button.menu.stats.selected", bundle: ..., traitCollection: ...)`
    static func buttonMenuStatsSelected(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonMenuStatsSelected, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.back", bundle: ..., traitCollection: ...)`
    static func cardBack(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardBack, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank0", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank0(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank0, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank1", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank10", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank10(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank10, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank11", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank11(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank11, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank12", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank12(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank12, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank2", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank3", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank4", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank5", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank6", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank7", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank8", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank8(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank8, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit0.rank9", bundle: ..., traitCollection: ...)`
    static func cardSuit0Rank9(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit0Rank9, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank0", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank0(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank0, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank1", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank10", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank10(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank10, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank11", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank11(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank11, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank12", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank12(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank12, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank2", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank3", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank4", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank5", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank6", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank7", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank8", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank8(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank8, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit1.rank9", bundle: ..., traitCollection: ...)`
    static func cardSuit1Rank9(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit1Rank9, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank0", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank0(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank0, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank1", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank10", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank10(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank10, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank11", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank11(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank11, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank12", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank12(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank12, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank2", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank3", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank4", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank5", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank6", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank7", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank8", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank8(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank8, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit2.rank9", bundle: ..., traitCollection: ...)`
    static func cardSuit2Rank9(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit2Rank9, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank0", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank0(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank0, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank1", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank10", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank10(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank10, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank11", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank11(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank11, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank12", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank12(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank12, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank2", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank3", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank4", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank5", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank6", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank7", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank8", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank8(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank8, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "card.suit3.rank9", bundle: ..., traitCollection: ...)`
    static func cardSuit3Rank9(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cardSuit3Rank9, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "iTunesArtwork", bundle: ..., traitCollection: ...)`
    static func iTunesArtwork(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iTunesArtwork, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.chip.blue", bundle: ..., traitCollection: ...)`
    static func iconChipBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconChipBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.done.blue", bundle: ..., traitCollection: ...)`
    static func iconDoneBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconDoneBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.done.green", bundle: ..., traitCollection: ...)`
    static func iconDoneGreen(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconDoneGreen, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.leaderboards.blue", bundle: ..., traitCollection: ...)`
    static func iconLeaderboardsBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconLeaderboardsBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.menu.play", bundle: ..., traitCollection: ...)`
    static func iconMenuPlay(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconMenuPlay, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.menu.stats", bundle: ..., traitCollection: ...)`
    static func iconMenuStats(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconMenuStats, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.share.facebook.large", bundle: ..., traitCollection: ...)`
    static func iconShareFacebookLarge(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconShareFacebookLarge, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.share.facebook.small", bundle: ..., traitCollection: ...)`
    static func iconShareFacebookSmall(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconShareFacebookSmall, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.share.instagram.large", bundle: ..., traitCollection: ...)`
    static func iconShareInstagramLarge(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconShareInstagramLarge, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.share.instagram.small", bundle: ..., traitCollection: ...)`
    static func iconShareInstagramSmall(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconShareInstagramSmall, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.share.twitter.large", bundle: ..., traitCollection: ...)`
    static func iconShareTwitterLarge(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconShareTwitterLarge, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.share.twitter.small", bundle: ..., traitCollection: ...)`
    static func iconShareTwitterSmall(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconShareTwitterSmall, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.stats.blue", bundle: ..., traitCollection: ...)`
    static func iconStatsBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconStatsBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "icon.stats.green", bundle: ..., traitCollection: ...)`
    static func iconStatsGreen(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.iconStatsGreen, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "launch.screen", bundle: ..., traitCollection: ...)`
    static func launchScreen(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.launchScreen, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.letters.blue", bundle: ..., traitCollection: ...)`
    static func overlayLettersBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayLettersBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.stats.locked.level.2", bundle: ..., traitCollection: ...)`
    static func overlayStatsLockedLevel2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayStatsLockedLevel2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.stats.locked.level.3", bundle: ..., traitCollection: ...)`
    static func overlayStatsLockedLevel3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayStatsLockedLevel3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.stats.locked.level.4", bundle: ..., traitCollection: ...)`
    static func overlayStatsLockedLevel4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayStatsLockedLevel4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.stats.locked.level.5", bundle: ..., traitCollection: ...)`
    static func overlayStatsLockedLevel5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayStatsLockedLevel5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.stats.locked.level.6", bundle: ..., traitCollection: ...)`
    static func overlayStatsLockedLevel6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayStatsLockedLevel6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.stats.locked.level.7", bundle: ..., traitCollection: ...)`
    static func overlayStatsLockedLevel7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayStatsLockedLevel7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.table.locked.level.2", bundle: ..., traitCollection: ...)`
    static func overlayTableLockedLevel2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayTableLockedLevel2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.table.locked.level.3", bundle: ..., traitCollection: ...)`
    static func overlayTableLockedLevel3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayTableLockedLevel3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.table.locked.level.4", bundle: ..., traitCollection: ...)`
    static func overlayTableLockedLevel4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayTableLockedLevel4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.table.locked.level.5", bundle: ..., traitCollection: ...)`
    static func overlayTableLockedLevel5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayTableLockedLevel5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.table.locked.level.6", bundle: ..., traitCollection: ...)`
    static func overlayTableLockedLevel6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayTableLockedLevel6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "overlay.table.locked.level.7", bundle: ..., traitCollection: ...)`
    static func overlayTableLockedLevel7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.overlayTableLockedLevel7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "shadow.blue", bundle: ..., traitCollection: ...)`
    static func shadowBlue(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shadowBlue, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "share.screen.instagram", bundle: ..., traitCollection: ...)`
    static func shareScreenInstagram(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shareScreenInstagram, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "share.screen.twitter", bundle: ..., traitCollection: ...)`
    static func shareScreenTwitter(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.shareScreenTwitter, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `TextBannerView`.
    static let textBannerView = _R.nib._TextBannerView()
    
    /// `UINib(name: "TextBannerView", bundle: ...)`
    static func textBannerView(_: Void) -> UINib {
      return UINib(resource: R.nib.textBannerView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HandCell`.
    static let handCell: ReuseIdentifier<HandCell> = ReuseIdentifier(identifier: "HandCell")
    /// Reuse identifier `LevelCell`.
    static let levelCell: ReuseIdentifier<LevelCell> = ReuseIdentifier(identifier: "LevelCell")
    /// Reuse identifier `StatsCell`.
    static let statsCell: ReuseIdentifier<StatsCell> = ReuseIdentifier(identifier: "StatsCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `GameScreen`, and contains static references to 2 segues.
    struct gameScreen {
      /// Segue identifier `FirstHands`.
      static let firstHands: StoryboardSegueIdentifier<UIStoryboardSegue, GameScreen, HandsViewController> = StoryboardSegueIdentifier(identifier: "FirstHands")
      /// Segue identifier `SecondHands`.
      static let secondHands: StoryboardSegueIdentifier<UIStoryboardSegue, GameScreen, HandsViewController> = StoryboardSegueIdentifier(identifier: "SecondHands")
      
      /// Optionally returns a typed version of segue `FirstHands`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func firstHands(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, GameScreen, HandsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.gameScreen.firstHands, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SecondHands`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func secondHands(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, GameScreen, HandsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.gameScreen.secondHands, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `MainScreen`, and contains static references to 3 segues.
    struct mainScreen {
      /// Segue identifier `Levels`.
      static let levels: StoryboardSegueIdentifier<UIStoryboardSegue, MainScreen, LevelsViewController> = StoryboardSegueIdentifier(identifier: "Levels")
      /// Segue identifier `Sharing`.
      static let sharing: StoryboardSegueIdentifier<UIStoryboardSegue, MainScreen, SharingViewController> = StoryboardSegueIdentifier(identifier: "Sharing")
      /// Segue identifier `Stats`.
      static let stats: StoryboardSegueIdentifier<UIStoryboardSegue, MainScreen, StatsViewController> = StoryboardSegueIdentifier(identifier: "Stats")
      
      /// Optionally returns a typed version of segue `Levels`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func levels(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MainScreen, LevelsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainScreen.levels, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Sharing`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sharing(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MainScreen, SharingViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainScreen.sharing, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Stats`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func stats(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, MainScreen, StatsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainScreen.stats, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `StatsScreen`, and contains static references to 1 segues.
    struct statsScreen {
      /// Segue identifier `Stats`.
      static let stats: StoryboardSegueIdentifier<UIStoryboardSegue, StatsScreen, StatsViewController> = StoryboardSegueIdentifier(identifier: "Stats")
      
      /// Optionally returns a typed version of segue `Stats`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func stats(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, StatsScreen, StatsViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.statsScreen.stats, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// Value: HoldemHands
      static let appName = StringResource(key: "app.name", tableName: "Localizable", locales: [])
      /// Value: You need %@ chips more to unlock %@
      static let bannerChipsToUnlockLevel = StringResource(key: "banner.chips.to.unlock.level", tableName: "Localizable", locales: [])
      /// Value: Congratulations! You've unlocked %@!
      static let bannerUnlockedLevel = StringResource(key: "banner.unlocked.level", tableName: "Localizable", locales: [])
      /// Value: Welcome! Choose better hand to win the round
      static let bannerWalkthroughChooseHand = StringResource(key: "banner.walkthrough.choose.hand", tableName: "Localizable", locales: [])
      /// Value: Nice Try... Tap or Swipe to play next hand
      static let bannerWalkthroughLost = StringResource(key: "banner.walkthrough.lost", tableName: "Localizable", locales: [])
      /// Value: Good Job! Tap or Swipe to play next hand
      static let bannerWalkthroughWon = StringResource(key: "banner.walkthrough.won", tableName: "Localizable", locales: [])
      /// Value: Unable to locate your Facebook account
      static let errorShareWithFacebook = StringResource(key: "error.share.with.facebook", tableName: "Localizable", locales: [])
      /// Value: Unable to locate your Instagram account
      static let errorShareWithInstagram = StringResource(key: "error.share.with.instagram", tableName: "Localizable", locales: [])
      /// Value: Unable to locate your Twitter account
      static let errorShareWithTwitter = StringResource(key: "error.share.with.twitter", tableName: "Localizable", locales: [])
      /// Value: Tie: %.2f%%
      static let textTieOdds = StringResource(key: "text.tie.odds", tableName: "Localizable", locales: [])
      /// Value: Win: %.2f%%
      static let textWinOdds = StringResource(key: "text.win.odds", tableName: "Localizable", locales: [])
      /// Value: Play
      static let titleDetailsLevels = StringResource(key: "title.details.levels", tableName: "Localizable", locales: [])
      /// Value: Share
      static let titleDetailsSharing = StringResource(key: "title.details.sharing", tableName: "Localizable", locales: [])
      /// Value: Stats
      static let titleDetailsStats = StringResource(key: "title.details.stats", tableName: "Localizable", locales: [])
      /// Value: Play HoldemHands - prove your mastery!
      static let titleSharingFacebook = StringResource(key: "title.sharing.facebook", tableName: "Localizable", locales: [])
      /// Value: Play #HoldemHands - prove your mastery!
      static let titleSharingInstagram = StringResource(key: "title.sharing.instagram", tableName: "Localizable", locales: [])
      /// Value: Play @HoldemHands - prove your mastery!
      static let titleSharingTwitter = StringResource(key: "title.sharing.twitter", tableName: "Localizable", locales: [])
      
      /// Value: HoldemHands
      static func appName(_: Void) -> String {
        return NSLocalizedString("app.name", comment: "")
      }
      
      /// Value: You need %@ chips more to unlock %@
      static func bannerChipsToUnlockLevel(value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("banner.chips.to.unlock.level", comment: ""), locale: NSLocale.currentLocale(), value1, value2)
      }
      
      /// Value: Congratulations! You've unlocked %@!
      static func bannerUnlockedLevel(value1: String) -> String {
        return String(format: NSLocalizedString("banner.unlocked.level", comment: ""), locale: NSLocale.currentLocale(), value1)
      }
      
      /// Value: Welcome! Choose better hand to win the round
      static func bannerWalkthroughChooseHand(_: Void) -> String {
        return NSLocalizedString("banner.walkthrough.choose.hand", comment: "")
      }
      
      /// Value: Nice Try... Tap or Swipe to play next hand
      static func bannerWalkthroughLost(_: Void) -> String {
        return NSLocalizedString("banner.walkthrough.lost", comment: "")
      }
      
      /// Value: Good Job! Tap or Swipe to play next hand
      static func bannerWalkthroughWon(_: Void) -> String {
        return NSLocalizedString("banner.walkthrough.won", comment: "")
      }
      
      /// Value: Unable to locate your Facebook account
      static func errorShareWithFacebook(_: Void) -> String {
        return NSLocalizedString("error.share.with.facebook", comment: "")
      }
      
      /// Value: Unable to locate your Instagram account
      static func errorShareWithInstagram(_: Void) -> String {
        return NSLocalizedString("error.share.with.instagram", comment: "")
      }
      
      /// Value: Unable to locate your Twitter account
      static func errorShareWithTwitter(_: Void) -> String {
        return NSLocalizedString("error.share.with.twitter", comment: "")
      }
      
      /// Value: Tie: %.2f%%
      static func textTieOdds(value1: Double) -> String {
        return String(format: NSLocalizedString("text.tie.odds", comment: ""), locale: NSLocale.currentLocale(), value1)
      }
      
      /// Value: Win: %.2f%%
      static func textWinOdds(value1: Double) -> String {
        return String(format: NSLocalizedString("text.win.odds", comment: ""), locale: NSLocale.currentLocale(), value1)
      }
      
      /// Value: Play
      static func titleDetailsLevels(_: Void) -> String {
        return NSLocalizedString("title.details.levels", comment: "")
      }
      
      /// Value: Share
      static func titleDetailsSharing(_: Void) -> String {
        return NSLocalizedString("title.details.sharing", comment: "")
      }
      
      /// Value: Stats
      static func titleDetailsStats(_: Void) -> String {
        return NSLocalizedString("title.details.stats", comment: "")
      }
      
      /// Value: Play HoldemHands - prove your mastery!
      static func titleSharingFacebook(_: Void) -> String {
        return NSLocalizedString("title.sharing.facebook", comment: "")
      }
      
      /// Value: Play #HoldemHands - prove your mastery!
      static func titleSharingInstagram(_: Void) -> String {
        return NSLocalizedString("title.sharing.instagram", comment: "")
      }
      
      /// Value: Play @HoldemHands - prove your mastery!
      static func titleSharingTwitter(_: Void) -> String {
        return NSLocalizedString("title.sharing.twitter", comment: "")
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let hostingBundle = NSBundle(identifier: "com.visput.holdemhands.prod") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _TextBannerView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TextBannerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextBannerView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TextBannerView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "launch.screen") == nil { throw ValidationError(description: "[R.swift] Image named 'launch.screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let gameScreen = StoryboardViewControllerResource<GameScreen>(identifier: "GameScreen")
      let mainScreen = StoryboardViewControllerResource<MainScreen>(identifier: "MainScreen")
      let name = "Main"
      let statsScreen = StoryboardViewControllerResource<StatsScreen>(identifier: "StatsScreen")
      
      func gameScreen(_: Void) -> GameScreen? {
        return UIStoryboard(resource: self).instantiateViewController(gameScreen)
      }
      
      func mainScreen(_: Void) -> MainScreen? {
        return UIStoryboard(resource: self).instantiateViewController(mainScreen)
      }
      
      func statsScreen(_: Void) -> StatsScreen? {
        return UIStoryboard(resource: self).instantiateViewController(statsScreen)
      }
      
      static func validate() throws {
        if UIImage(named: "icon.stats.green") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.stats.green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.share.facebook.small") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.share.facebook.small' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.menu.stats") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.menu.stats' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.share.twitter.small") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.share.twitter.small' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.done.green") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.done.green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.chip.blue") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.chip.blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button.menu.share.selected") == nil { throw ValidationError(description: "[R.swift] Image named 'button.menu.share.selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.leaderboards.blue") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.leaderboards.blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "overlay.letters.blue") == nil { throw ValidationError(description: "[R.swift] Image named 'overlay.letters.blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.done.blue") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.done.blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.share.facebook.large") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.share.facebook.large' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button.menu.play.normal") == nil { throw ValidationError(description: "[R.swift] Image named 'button.menu.play.normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "shadow.blue") == nil { throw ValidationError(description: "[R.swift] Image named 'shadow.blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "background.hand.odds.green") == nil { throw ValidationError(description: "[R.swift] Image named 'background.hand.odds.green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "background.green") == nil { throw ValidationError(description: "[R.swift] Image named 'background.green' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.share.instagram.large") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.share.instagram.large' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.share.twitter.large") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.share.twitter.large' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button.menu.play.selected") == nil { throw ValidationError(description: "[R.swift] Image named 'button.menu.play.selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button.menu.share.normal") == nil { throw ValidationError(description: "[R.swift] Image named 'button.menu.share.normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button.menu.stats.normal") == nil { throw ValidationError(description: "[R.swift] Image named 'button.menu.stats.normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "card.back") == nil { throw ValidationError(description: "[R.swift] Image named 'card.back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.menu.play") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.menu.play' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button.menu.stats.selected") == nil { throw ValidationError(description: "[R.swift] Image named 'button.menu.stats.selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "icon.share.instagram.small") == nil { throw ValidationError(description: "[R.swift] Image named 'icon.share.instagram.small' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "background.blue") == nil { throw ValidationError(description: "[R.swift] Image named 'background.blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().mainScreen() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'mainScreen' could not be loaded from storyboard 'Main' as 'MainScreen'.") }
        if _R.storyboard.main().gameScreen() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'gameScreen' could not be loaded from storyboard 'Main' as 'GameScreen'.") }
        if _R.storyboard.main().statsScreen() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'statsScreen' could not be loaded from storyboard 'Main' as 'StatsScreen'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}